#!/bin/bash

# shellcheck disable=SC1091,SC2086,SC2181

. /etc/default/openmediavault

declare -i ee=0
declare -i plugin=0
declare -i status=0
declare -l arch=""

# cockpit
declare cockpitPackages=""

# docker
declare dockerPackages=""
declare dockerStorage=""
daemonJson="/etc/docker/daemon.json"
dockerBin="/usr/bin/docker"
dockerCompose="/usr/local/bin/docker-compose"
dockerComposeDeb="/usr/libexec/docker/cli-plugins/docker-compose"
dockerOverrideDir="/etc/systemd/system/docker.service.d"
dockerOverrideFile="${dockerOverrideDir}/waitAllMounts.conf"
omvextrasList="/etc/apt/sources.list.d/omvextras.list"

# portainer
declare -i agentport=8000
declare -i webport=9000
portainerImage="portainer/portainer-ce"
portainerImageOld="portainer/portainer"
portainerName="portainer"
portainerVolume="portainer_data"

# yacht
declare -i yachtport=8001
yachtImage="selfhostedpro/yacht"
yachtName="yacht"
yachtVolume="yacht"

setArch()
{
  arch="$(dpkg --print-architecture)"
}

checkDNS()
{
  getent="/usr/bin/getent"
  if [ -f "${getent}" ]; then
    if ! ${getent} hosts hub.docker.com > /dev/null; then
      echo "DNS error.  Exiting ..."
      exit 0
    else
      echo "DNS OK."
    fi
  fi
}

setCockpitPackages()
{
  cockpitPackages="cockpit cockpit-packagekit"
  if [[ "${arch}" == "amd64" ]] || [[ "${arch}" == "i386" ]]; then
    cockpitPackages="${cockpitPackages} cockpit-machines virtinst qemu-system-x86 qemu-utils libvirt-dbus cockpit-storaged dnsmasq-base"
  fi
}

setDockerPackages()
{
  if [[ "${arch}" == "i386" ]] || ! grep -q 'docker' ${omvextrasList}; then
    # there is no i386 docker-ce package in the docker repos
    # if docker repos are disabled, use debian repos as well
    # use docker.io from Debian repo
    dockerPackages="docker.io docker-compose"
  else
    dockerPackages="docker-ce docker-compose-plugin"
  fi
}

setExports()
{
  export DEBIAN_FRONTEND=noninteractive
  export APT_LISTCHANGES_FRONTEND=none
  export LANG=C.UTF-8
}

setConfig()
{
  # if openmediavault is installed, get docker storage path
  if [ -f "/usr/share/openmediavault/scripts/helper-functions" ]; then
    # source openmediavault functions
    . /etc/default/openmediavault
    . /usr/share/openmediavault/scripts/helper-functions

    xpath="/config/system/omvextras"
    dockerStorage=$(omv_config_get "${xpath}/dockerStorage")
    echo "Docker storage :: ${dockerStorage}"
    agentport=$(omv_config_get "${xpath}/agentport")
    echo "Agent port:: ${agentport}"
    webport=$(omv_config_get "${xpath}/webport")
    echo "Web port:: ${webport}"
    yachtport=$(omv_config_get "${xpath}/yachtport")
    echo "Yacht port:: ${yachtport}"
    ee=$(omv_config_get "${xpath}/ee")
    echo "ee:: ${ee}"
    if [ ${ee} -eq 1 ]; then
      portainerImage="${portainerImage/ce/ee}"
    fi
    echo "image:: ${portainerImage}"

    enabletls=$(omv_config_get "${xpath}/enabletls")
    echo "Enable TLS:: ${enabletls}"
    if (( enabletls )); then
      local tlscert_uuid tlscert_name missing_crt missing_key
      tlscert_uuid=$(omv_config_get "${xpath}/tlscertificateref")
      tlscert_name="$(omv_config_get "//system/certificates/sslcertificate[uuid = '${tlscert_uuid}']/comment")"
      tlscert_crt="${OMV_SSL_CERTIFICATE_DIR}/certs/${OMV_SSL_CERTIFICATE_PREFIX:-openmediavault-}${tlscert_uuid}.crt"
      tlscert_key="${OMV_SSL_CERTIFICATE_DIR}/private/${OMV_SSL_CERTIFICATE_PREFIX:-openmediavault-}${tlscert_uuid}.key"
      if [ ! -f "$tlscert_crt" ]; then missing_crt=1; fi
      if [ ! -f "$tlscert_key" ]; then missing_key=1; fi
      echo "TLS certificate:: ${tlscert_name}"
      echo "  crt: ${missing_crt:+(NOT FOUND) }${tlscert_crt}"
      echo "  key: ${missing_key:+(NOT FOUND) }${tlscert_key}"
    fi
  fi
}

updateRepos()
{
  # update repo lists
  if ! apt-get update; then
    echo "Failed to update apt repos."
    exit 10
  fi
}

removeCockpit()
{
  setCockpitPackages
  setExports

  if dpkg --list | grep --quiet openmediavault-kvm; then
    plugin=1
  fi

  # remove cockpit packages
  status=0
  for pkg in ${cockpitPackages}; do
    if [ ${plugin} -eq 1 ]; then
      if [[ ! "${pkg}" == cockpit* ]]; then
        echo "Skipping ${pkg} because openmediavault-kvm plugin is installed."
        continue
      fi
    fi
    if dpkg --list | grep --quiet "${pkg}"; then
      status=1
      if apt-get --yes --auto-remove purge ${pkg}; then
        echo "Successfully removed '${pkg}' package."
      else
        echo "Failed to remove '${pkg}' package."
        exit 1
      fi
    fi
  done
  if [ ${status} -ne 1 ]; then
    echo "No cockpit packages to remove."
  fi
}

removeDocker()
{
  setExports
  setDockerPackages

  if [ -f "${dockerOverrideFile}" ]; then
    rm -f "${dockerOverrideFile}"
    systemctl daemon-reload
  fi

  # remove docker
  status=0
  for pkg in ${dockerPackages}; do
    if dpkg --list | grep --quiet "${pkg}"; then
      status=1
      if apt-get --yes --auto-remove purge ${pkg}; then
        echo "Successfully removed '${pkg}' package."
      else
        echo "Failed to remove '${pkg}' package."
        exit 2
      fi
    fi
  done
  if [ ${status} -ne 1 ]; then
    echo "No docker packages to remove."
  fi
  if [ -f "${dockerCompose}" ]; then
    rm "${dockerCompose}"
  fi
}

removePortainer()
{
  status=0

  if [ ! -f "${dockerBin}" ]; then
    echo "Docker is not installed."
    exit 0
  fi

  # stop existing portainer container
  for cn in $(docker container ls --format "{{.Names}},{{.Image}}" | grep --ignore-case "${portainerName}"); do
    echo "Stopping ${cn%%,*} ..."
    docker container stop "${cn%%,*}"
    status=1
  done

  # remove existing portainer container
  for cn in $(docker container ls --all --format "{{.Names}},{{.Image}}" | grep --ignore-case "${portainerName}"); do
    echo "Removing ${cn%%,*} ..."
    docker container rm "${cn%%,*}"
    status=1
  done

  # remove existing portainer or portainer-ce images
  for img in ${portainerImage} ${portainerImageOld}; do
    if docker image ls --all | grep --quiet "${img}"; then
      echo "Removing ${img} image ..."
      docker image rm "${img}"
      status=1
    fi
  done

  if [ ${status} -ne 1 ]; then
    echo "No portainer containers or images to remove."
  fi
}

removePortainerData()
{
  status=0

  if [ ! -f "${dockerBin}" ]; then
    echo "Docker is not installed."
    exit 0
  fi

  # remove existing portainer volume
  for vol in $(docker volume ls --format "{{.Name}}" | grep --ignore-case "${portainerVolume}"); do
    echo "Removing ${vol} ..."
    docker volume rm "${vol}"
    status=1
  done

  if [ ${status} -ne 1 ]; then
    echo "No portainer volumes to remove."
  fi
}

removeYacht()
{
  status=0

  if [ ! -f "${dockerBin}" ]; then
    echo "Docker is not installed."
    exit 0
  fi

  # stop existing yacht container
  for cn in $(docker container ls --format "{{.Names}},{{.Image}}" | grep --ignore-case "${yachtName}"); do
    echo "Stopping ${cn%%,*} ..."
    docker container stop "${cn%%,*}"
    status=1
  done

  # remove existing yacht container
  for cn in $(docker container ls --all --format "{{.Names}},{{.Image}}" | grep --ignore-case "${yachtName}"); do
    echo "Removing ${cn%%,*} ..."
    docker container rm "${cn%%,*}"
    status=1
  done

  # remove existing yacht image
  if docker image ls --all | grep --quiet "${yachtImage}"; then
    echo "Removing ${yachtImage} image ..."
    docker image rm "${yachtImage}"
    status=1
  fi

  if [ ${status} -ne 1 ]; then
    echo "No yacht containers or images to remove."
  fi
}

installCockpit()
{
  setCockpitPackages
  setExports

  # check to see if already installed
  status=0
  for pkg in ${cockpitPackages}; do
    if ! dpkg --list | grep --quiet "${pkg}"; then
      status=1
    fi
  done

  # install cockpit packages
  if [ ${status} -eq 1 ]; then
    updateRepos

    if apt-get --yes install ${cockpitPackages}; then
      echo "Successfully installed cockpit."
    else
      echo "Failed to install cockpit."
      exit 4
    fi
  else
    echo "cockpit already installed."
  fi
}

configDocker()
{
  setExports

  local dockerDir="/etc/docker"
  local configFile="${dockerDir}/daemon.json"
  local newDataRoot="${dockerStorage}"
  local oldDataRoot=""

  # if path is not specified, do nothing
  if [ -z "${newDataRoot}" ]; then
    return
  fi

  # make sure the Docker directory exists
  if [ ! -d "${dockerDir}" ]; then
    mkdir "${dockerDir}"
  fi

  # make sure the Docker daemon configuration file exists
  if [ ! -f "${configFile}" ]; then
    touch "${configFile}"
  else
    oldDataRoot=$(jq -r '.["data-root"]' "${configFile}")
  fi

  # if the path is the same, do nothing
  if [ "${newDataRoot}" == "${oldDataRoot}" ]; then
    return
  fi

  # store the path in configuration file
  local tempFile="$(mktemp)"
  jq -s -r --arg DATAROOT "${newDataRoot}" '(.[] // {}) + {"data-root": $DATAROOT}' "${configFile}" > "${tempFile}"
  cat "${tempFile}" > "${configFile}"
  rm -f "${tempFile}"

  # enable and restart Docker service
  systemctl enable docker.service
  systemctl restart docker.service
}

configOverride()
{
  # create override to wait for local filesystems
  if [ ! -d "${dockerOverrideDir}" ]; then
    echo "Create override directory ..."
    mkdir -p "${dockerOverrideDir}"
  fi

  echo "Create override file ..."
  cat <<EOF > ${dockerOverrideFile}
[Unit]
After=local-fs.target $(systemctl list-units --type=mount | grep /srv | awk '{ print $1 }' | tr '\n' ' ')
EOF
  chmod -v 644 ${dockerOverrideFile}
  echo "Reload systemd daemon ..."
  systemctl daemon-reload
}

installDocker()
{
  setExports
  setDockerPackages
  configOverride

  # check to see if already installed to avoid restarting service
  for pkg in ${dockerPackages}; do
    if ! dpkg --list | grep --quiet "${pkg}"; then
      status=1
    fi
  done

  # install docker-ce package
  if [ ${status} -eq 1 ]; then
    updateRepos

    if apt-get --yes install ${dockerPackages}; then
      echo "Successfully installed docker."
    else
      echo "Failed to install docker."
      echo "Try fixing install..."
      if apt-get --fix-broken --yes install; then
        echo "Successfully fixed docker install."
      else
        echo "Unable to fix docker install."
        exit 5
      fi
    fi
  fi

  # mark packages manual
  apt-mark manual ${dockerPackages}

  # Write daemon.json file
  configDocker

  # Create docker-compose symlink
  if [ -f "${dockerComposeDeb}" ]; then
    if [ -e "${dockerCompose}" ]; then
      echo "Removing old ${dockerCompose} file..."
      rm -fv "${dockerCompose}"
    fi
    # create new symlink
    ln -sv "${dockerComposeDeb}" "${dockerCompose}"
  fi
}

installPortainer()
{
  if [ ! -f "${dockerBin}" ]; then
    installDocker
  fi

  # remove existing
  removePortainer

  # create portainer data volume
  if ! docker volume ls | grep --quiet "${portainerVolume}"; then
    echo "Creating portainer volume ..."
    docker volume create "${portainerVolume}"
  fi

  # Extra configuration
  local opts args

  if (( enabletls )) && [ -f "${tlscert_crt}" ] && [ -f "${tlscert_key}" ]; then
    # https://docs.portainer.io/v/ce-2.11/advanced/ssl#docker-standalone
    args+=(
      --sslcert /certs/openmediavault.crt
      --sslkey /certs/openmediavault.key
    )
    opts+=(
      -p "$webport":9443
      -v "$tlscert_crt":/certs/openmediavault.crt:ro
      -v "$tlscert_key":/certs/openmediavault.key:ro
    )
  elif (( enabletls )); then
    echo "The selected certificate cannot be used."
    opts+=(-p "${webport}":9443)
  else
    opts+=(-p "${webport}":9000)
  fi

  # pull and start portainer
  echo "Pulling ${portainerImage} ..."
  docker pull "${portainerImage}"

  echo "Starting ${portainerImage} ..."
  docker run -d --name "${portainerName}" \
    --restart=unless-stopped \
    -p "${agentport}":8000 \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v "${portainerVolume}":/data \
    "${opts[@]}" \
    "${portainerImage}" "${args[@]}"

  if [ $? -gt 0 ]; then
    echo "Something went wrong trying to pull and start portainer ..."
  fi
}

installYacht()
{
  if [ ! -f "${dockerBin}" ]; then
    installDocker
  fi

  # remove existing
  removeYacht

  # create yacht data volume
  if ! docker volume ls | grep --quiet "${yachtVolume}"; then
    echo "Creating yacht volume ..."
    docker volume create "${yachtVolume}"
  fi

  # pull and start yacht
  echo "Pulling and starting ${yachtImage} ..."
  docker run -d --name "${yachtName}" -p ${yachtport}:8000 --restart=unless-stopped -v /var/run/docker.sock:/var/run/docker.sock -v ${yachtVolume}:/config ${yachtImage}
  if [ $? -gt 0 ]; then
    echo "Something went wrong trying to pull and start yacht ..."
  fi
}

setArch
setConfig

option="${1}"
state="${2}"

echo "arch   :: ${arch}"
echo "option :: ${option}"
echo "state  :: ${state}"
echo "extras :: $(dpkg-query -W -f='${Version}' openmediavault-omvextrasorg)"

if [[ "${state}" == "install" ]]; then
  checkDNS
fi

case ${option} in
  cockpit)
    if [[ "${state}" == "remove" ]]; then
      removeCockpit
    else
      installCockpit
    fi
    ;;
  portainer)
    if [[ "${arch}" == "i386" ]]; then
      echo "portainer is not compatible with i386 systems."
      exit 0
    fi
    case ${state} in
      remove)
        removePortainer
        ;;
      removedata)
        removePortainer
        removePortainerData
        ;;
      *)
        installPortainer
    esac
    ;;
  yacht)
    if [[ "${state}" == "remove" ]]; then
      removeYacht
    else
      installYacht
    fi
    ;;
  *)
    if [[ "${state}" == "remove" ]]; then
      removeDocker
    elif [[ "${state}" == "config" ]]; then
      configDocker
    else
      installDocker
    fi
    ;;
esac

exit 0
