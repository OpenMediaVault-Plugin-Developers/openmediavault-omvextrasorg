#!/bin/sh
#
# @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
# @author    Volker Theile <volker.theile@openmediavault.org>
# @author    OpenMediaVault Plugin Developers <plugins@omv-extras.org>
# @copyright Copyright (c) 2009-2013 Volker Theile
# @copyright Copyright (c) 2013-2015 OpenMediaVault Plugin Developers
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

BACKPORTS_REPO="/etc/apt/sources.list.d/backports.list"

OMVVERSION=$(xmlstarlet sel -t -v "//distribution" ${OMV_PRODUCTINFO_FILE} | xmlstarlet unesc)
RELEASE="wheezy"

XPATH="//system/omvextrasorg/"
XPATH_REPO="${XPATH}repos/repo"

SKIP=false
AMD64=false

conf=$2

update()
{
    export LANG=C
    export LC_ALL=C

    OMVEXTRASREPOFILE="/etc/apt/sources.list.d/omv-extras-org-${OMVVERSION}.list"
    OMVEXTRASCUSTOMREPOFILE="/etc/apt/sources.list.d/omv-extras-org-custom.list"
    OMVEXTRASAPTPREFS="/etc/apt/preferences.d/99omv-extras-org"

    REPO_LOCATION="UniverseNAS.0rca.ch"
    REPO_URL="http://${REPO_LOCATION}/omvextras/"

    DH2K_REPO_LOCATION="dh2k.omv-extras.org"
    DH2K_REPO_URL="http://${DH2K_REPO_LOCATION}/debian/"

    KEYSERVER="hkp://keyserver.ubuntu.com:80"
    KEYSERVER2="hkp://p80.pool.sks-keyservers.net:80"

    /bin/rm -f ${OMVEXTRASREPOFILE}
    /bin/rm -f ${OMVEXTRASCUSTOMREPOFILE}
    /bin/rm -f ${OMVEXTRASAPTPREFS}
    /bin/rm -f /etc/apt/sources.list.d/omv-extras-org-*.list

    echo "# This is file is generated." > ${OMVEXTRASCUSTOMREPOFILE}
    touch ${OMVEXTRASAPTPREFS}

    # omv-extras stable
    if [ "$(omv_config_get "${XPATH}enable")" = "1" ]; then
        echo "# Regular omv-extras.org repo" >> ${OMVEXTRASREPOFILE}
        echo "deb ${REPO_URL} ${OMVVERSION} main" >> ${OMVEXTRASREPOFILE}
        cat <<EOF >> ${OMVEXTRASAPTPREFS}
Package: *
Pin: release n=${OMVVERSION}, origin ${REPO_LOCATION}
Pin-Priority: 995

EOF
    fi

    # omv-extras testing
    if [ "$(omv_config_get "${XPATH}testing")" = "1" ]; then
        echo "# Testing omv-extras.org repo" >> ${OMVEXTRASREPOFILE}
        echo "deb ${REPO_URL} ${OMVVERSION}-testing main" >> ${OMVEXTRASREPOFILE}
        cat <<EOF >> ${OMVEXTRASAPTPREFS}
Package: *
Pin: release n=${OMVVERSION}-testing, origin ${REPO_LOCATION}
Pin-Priority: 996

EOF
    fi

    # omv-extras virtualbox
    if [ "$(omv_config_get "${XPATH}vbox")" = "1" ]; then
        echo "# Virtualbox repo" >> ${OMVEXTRASREPOFILE}
        echo "deb ${REPO_URL} ${OMVVERSION}-vb main" >> ${OMVEXTRASREPOFILE}
        echo "deb ${DH2K_REPO_URL} virtualbox-${RELEASE}-mirror main" >> ${OMVEXTRASREPOFILE}
        #echo "deb http://download.virtualbox.org/virtualbox/debian ${RELEASE} contrib non-free" >> ${OMVEXTRASREPOFILE}
        cat <<EOF >> ${OMVEXTRASAPTPREFS}
Package: *
Pin: release n=${OMVVERSION}-vb, origin ${REPO_LOCATION}
Pin-Priority: 995

EOF
    fi

    # omv-extras plexmediaserver
    if [ "$(omv_config_get "${XPATH}plex")" = "1" ]; then
        echo "# Plexmediaserver repo" >> ${OMVEXTRASREPOFILE}
        echo "deb ${REPO_URL} ${OMVVERSION}-plex main" >> ${OMVEXTRASREPOFILE}
        echo "deb ${DH2K_REPO_URL} plex-${RELEASE}-mirror main" >> ${OMVEXTRASREPOFILE}
        cat <<EOF >> ${OMVEXTRASAPTPREFS}
Package: *
Pin: release n=${OMVVERSION}-plex, origin ${REPO_LOCATION}
Pin-Priority: 995

EOF
    fi

    # omv-extras greyhole
    if [ "$(omv_config_get "${XPATH}greyhole")" = "1" ]; then
        echo "# Greyhole repo" >> ${OMVEXTRASREPOFILE}
        echo "deb ${REPO_URL} ${OMVVERSION}-greyhole main" >> ${OMVEXTRASREPOFILE}
        echo "deb http://www.greyhole.net/releases/deb stable main" >> ${OMVEXTRASREPOFILE}
        cat <<EOF >> ${OMVEXTRASAPTPREFS}
Package: *
Pin: release n=${OMVVERSION}-greyhole, origin ${REPO_LOCATION}
Pin-Priority: 995

EOF
    fi

    # omv-extras vdr
    if [ "$(omv_config_get "${XPATH}vdr")" = "1" ]; then
        echo "# VDR repo" >> ${OMVEXTRASREPOFILE}
        echo "deb ${REPO_URL} ${OMVVERSION}-vdr main" >> ${OMVEXTRASREPOFILE}
        echo "deb http://e-tobi.net/vdr-experimental/ ${RELEASE} addons base vdr-multipatch" >> ${OMVEXTRASREPOFILE}
        apt-key adv --keyserver ${KEYSERVER} --recv-keys "041390BC"
        cat <<EOF >> ${OMVEXTRASAPTPREFS}
Package: *
Pin: release n=${OMVVERSION}-vdr, origin ${REPO_LOCATION}
Pin-Priority: 995

Package: *
Pin: release o=e-tobi.net
Pin-Priority: 995

EOF
    fi

    # omv-extras miller
    if [ "$(omv_config_get "${XPATH}miller")" = "1" ]; then
        echo "# miller repo" >> ${OMVEXTRASREPOFILE}
        echo "deb ${DH2K_REPO_URL} ${OMVVERSION}-miller main" >> ${OMVEXTRASREPOFILE}
        echo "deb http://ppa.launchpad.net/deluge-team/ppa/ubuntu precise main" >> ${OMVEXTRASREPOFILE}
        cat <<EOF >> ${OMVEXTRASAPTPREFS}
Package: *
Pin: release n=${OMVVERSION}-miller, origin ${DH2K_REPO_LOCATION}
Pin-Priority: 995

Package: *
Pin: release n=precise, origin ppa.launchpad.net/deluge-team/ppa/ubuntu
Pin-Priority: 995

EOF
    fi

    # omv-extras miller-testing
    if [ "$(omv_config_get "${XPATH}millertesting")" = "1" ]; then
        echo "# miller testing repo" >> ${OMVEXTRASREPOFILE}
        echo "deb ${DH2K_REPO_URL} ${OMVVERSION}-miller-testing main" >> ${OMVEXTRASREPOFILE}
        cat <<EOF >> ${OMVEXTRASAPTPREFS}
Package: *
Pin: release n=${OMVVERSION}-miller-testing, origin ${DH2K_REPO_LOCATION}
Pin-Priority: 995

EOF
    fi

    # omv-extras btsync
    if [ "$(omv_config_get "${XPATH}btsync")" = "1" ]; then
        echo "# btsync repo" >> ${OMVEXTRASREPOFILE}
        echo "deb ${REPO_URL} ${OMVVERSION}-btsync main" >> ${OMVEXTRASREPOFILE}
        echo "deb http://debian.yeasoft.net/btsync14 ${RELEASE} main" >> ${OMVEXTRASREPOFILE}
        echo "# syncthing repo" >> ${OMVEXTRASREPOFILE}
        echo "deb http://apt.syncthing.net/ syncthing release" >> ${OMVEXTRASREPOFILE}

        getArch

        if ! $SKIP; then
            echo "# spideroak repo" >> ${OMVEXTRASREPOFILE}
            echo "deb http://apt.spideroak.com/ubuntu-spideroak-hardy/ release restricted" >> ${OMVEXTRASREPOFILE}
        fi

        cat <<EOF >> ${OMVEXTRASAPTPREFS}
Package: *
Pin: release n=${OMVVERSION}-btsync, origin ${REPO_LOCATION}
Pin-Priority: 995

Package: *
Pin: release n=${RELEASE}, origin debian.yeasoft.net
Pin-Priority: 995

EOF
    fi

    # omv-extras vpn
    if [ "$(omv_config_get "${XPATH}vpn")" = "1" ]; then
        echo "# VPN repo" >> ${OMVEXTRASREPOFILE}
        echo "deb ${DH2K_REPO_URL} ${OMVVERSION}-vpn main" >> ${OMVEXTRASREPOFILE}
        cat <<EOF >> ${OMVEXTRASAPTPREFS}
Package: *
Pin: release n=${OMVVERSION}-vpn, origin ${DH2K_REPO_LOCATION}
Pin-Priority: 995

EOF
    fi

    # omv-extras developer/beta
    if [ "$(omv_config_get "${XPATH}beta")" = "1" ]; then
        echo "# Beta repo" >> ${OMVEXTRASREPOFILE}
        echo "deb ${REPO_URL} ${OMVVERSION}-beta main" >> ${OMVEXTRASREPOFILE}
        cat <<EOF >> ${OMVEXTRASAPTPREFS}
Package: *
Pin: release n=${OMVVERSION}-beta, origin ${REPO_LOCATION}
Pin-Priority: 995

EOF
    fi

    # omv-extras zfs
    if [ "$(omv_config_get "${XPATH}zfs")" = "1" ]; then
        # add large zfsonlinux key and linux-headers necessary for zfs module compilation
        apt-key adv --keyserver ${KEYSERVER} --recv-keys "4D5843EA"
        apt-key adv --keyserver ${KEYSERVER} --recv-keys "8E234FB17DFFA34D"
        case ${conf} in
            configure) ;;
            *)  apt-get --yes --force-yes --fix-missing install linux-headers-$(uname -r) || : ;;
        esac
        echo "# ZFS repo" >> ${OMVEXTRASREPOFILE}
        echo "deb ${REPO_URL} ${OMVVERSION}-zfs main" >> ${OMVEXTRASREPOFILE}
        echo "deb http://archive.zfsonlinux.org/debian ${RELEASE} main" >> ${OMVEXTRASREPOFILE}
        cat <<EOF >> ${OMVEXTRASAPTPREFS}
Package: *
Pin: release n=${RELEASE}, origin archive.zfsonlinux.org
Pin-Priority: 400

Package: *
Pin: release n=${OMVVERSION}-zfs, origin ${REPO_LOCATION}
Pin-Priority: 996

EOF
    fi

    # omv-extras zfs testing
    if [ "$(omv_config_get "${XPATH}zfstesting")" = "1" ]; then
        echo "# ZFS testing repo" >> ${OMVEXTRASREPOFILE}
        echo "deb ${REPO_URL} ${OMVVERSION}-zfs-testing main" >> ${OMVEXTRASREPOFILE}
        cat <<EOF >> ${OMVEXTRASAPTPREFS}
Package: *
Pin: release n=${OMVVERSION}-zfs-testing, origin ${REPO_LOCATION}
Pin-Priority: 997

EOF
    fi

    # omv-extras gluster
    if [ "$(omv_config_get "${XPATH}gluster")" = "1" ]; then
        echo "# Gluster repo" >> ${OMVEXTRASREPOFILE}
        echo "deb ${REPO_URL} ${OMVVERSION}-gluster main" >> ${OMVEXTRASREPOFILE}
        echo "deb http://download.gluster.org/pub/gluster/glusterfs/3.5/3.5.2/Debian/${RELEASE}/apt ${RELEASE} main" >> ${OMVEXTRASREPOFILE}
        cat <<EOF >> ${OMVEXTRASAPTPREFS}
Package: *
Pin: release n=${OMVVERSION}-gluster, origin ${REPO_LOCATION}
Pin-Priority: 996

Package: *
Pin: release o=download.gluster.org
Pin-Priority: 1001

EOF
    fi

    # omv-extras mono
    if [ "$(omv_config_get "${XPATH}mono")" = "1" ]; then
        # add NzbDrone repository key
        apt-key adv --keyserver ${KEYSERVER} --recv-keys "FDA5DFFC"
        echo "# mono-project repo" >> ${OMVEXTRASREPOFILE}
        echo "deb ${REPO_URL} ${OMVVERSION}-mono main" >> ${OMVEXTRASREPOFILE}
        echo "deb http://download.mono-project.com/repo/debian ${RELEASE} main" >> ${OMVEXTRASREPOFILE}
        cat <<EOF >> ${OMVEXTRASAPTPREFS}
Package: *
Pin: release n=${OMVVERSION}-mono, origin ${REPO_LOCATION}
Pin-Priority: 996

Package: *
Pin: release o=download.mono-project.com
Pin-Priority: 1001

EOF
    fi

    # omv-extras mono testing
    if [ "$(omv_config_get "${XPATH}monotesting")" = "1" ]; then
        echo "# mono testing repo" >> ${OMVEXTRASREPOFILE}
        echo "deb ${REPO_URL} ${OMVVERSION}-mono-testing main" >> ${OMVEXTRASREPOFILE}
        cat <<EOF >> ${OMVEXTRASAPTPREFS}
Package: *
Pin: release n=${OMVVERSION}-mono-testing, origin ${REPO_LOCATION}
Pin-Priority: 997

EOF
    fi

    # omv-extras docker
    if [ "$(omv_config_get "${XPATH}docker")" = "1" ]; then
        apt-key adv --keyserver ${KEYSERVER2} --recv-keys "58118E89F3A912897C070ADBF76221572C52609D"
        echo "# docker repo" >> ${OMVEXTRASREPOFILE}
        echo "deb ${REPO_URL} ${OMVVERSION}-docker main" >> ${OMVEXTRASREPOFILE}
        echo "deb https://apt.dockerproject.org/repo debian-${RELEASE} main" >> ${OMVEXTRASREPOFILE}
        cat <<EOF >> ${OMVEXTRASAPTPREFS}
Package: *
Pin: release n=${OMVVERSION}-docker, origin ${REPO_LOCATION}
Pin-Priority: 996

Package: *
Pin: release o=apt.dockerproject.org
Pin-Priority: 1001

EOF
    fi

    # omv-extras docker testing
    if [ "$(omv_config_get "${XPATH}dockertesting")" = "1" ]; then
        echo "# docker testing repo" >> ${OMVEXTRASREPOFILE}
        echo "deb ${REPO_URL} ${OMVVERSION}-docker-testing main" >> ${OMVEXTRASREPOFILE}
        cat <<EOF >> ${OMVEXTRASAPTPREFS}
Package: *
Pin: release n=${OMVVERSION}-docker-testing, origin ${REPO_LOCATION}
Pin-Priority: 997

EOF
    fi

    # omv-extras hwraid
    if [ "$(omv_config_get "${XPATH}hwraid")" = "1" ]; then
        echo "# hwraid repo" >> ${OMVEXTRASREPOFILE}
        echo "deb ${REPO_URL} ${OMVVERSION}-hwraid main" >> ${OMVEXTRASREPOFILE}
        echo "deb http://hwraid.le-vert.net/debian ${RELEASE} main" >> ${OMVEXTRASREPOFILE}
        cat <<EOF >> ${OMVEXTRASAPTPREFS}
Package: *
Pin: release n=${OMVVERSION}-hwraid, origin ${REPO_LOCATION}
Pin-Priority: 996

EOF
    fi

    cat <<EOF >> ${OMVEXTRASAPTPREFS}
Package: *
Pin: release n=${OMVVERSION}-backports, origin ${REPO_LOCATION}
Pin-Priority: 995

EOF

    chmod 644 ${OMVEXTRASAPTPREFS}

    # Process custom repos
    echo "# Custom repos" > ${OMVEXTRASCUSTOMREPOFILE}
    count=$(omv_config_get_count "${XPATH_REPO}")
    index=0
    while [ ${index} -le ${count} ]; do
        repo=$(omv_config_get "${XPATH_REPO}[position()=${index}]/repo")

        if [ "${repo}" != "" ]; then
            name=$(omv_config_get "${XPATH_REPO}[position()=${index}]/name")
            key=$(omv_config_get "${XPATH_REPO}[position()=${index}]/key")

            echo "# ${name}" >> ${OMVEXTRASCUSTOMREPOFILE}
            echo "${repo}" >> ${OMVEXTRASCUSTOMREPOFILE}

            if [ "${key}" != "" ]; then
                apt-key adv --keyserver ${KEYSERVER} --recv-keys "${key}"
            fi
        fi

        index=$(( ${index} + 1 ))
    done

    if [ -f "${BACKPORTS_REPO}" ]; then
        createBackportsFile
    fi
}

systemd()
{
    export LANG=C
    export DEBIAN_FRONTEND=noninteractive

    DEFAULTGRUB="/etc/default/grub"
    BACKUPDEFAULTGRUB="/root/default_grub"

    echo "Installing systemd..."
    apt-get --yes --force-yes --fix-missing install systemd

    echo "Change grub default..."
    cp ${DEFAULTGRUB} ${BACKUPDEFAULTGRUB}
    sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT=\"quiet\"/GRUB_CMDLINE_LINUX_DEFAULT=\"quiet init=\/bin\/systemd\"/g' ${DEFAULTGRUB}

    echo "Updating grub..."
    update-grub

    echo "..."
    echo "Please reboot to use systemd"
}

backports()
{
    export LANG=C
    export DEBIAN_FRONTEND=noninteractive

    getArch

    if $SKIP; then
        echo "Unsupported kernel and/or processor"
    else
        createBackportsFile

        echo "Updating..."
        apt-get --quiet update > /dev/null 2>&1

        case "${RELEASE}" in
            wheezy)
                echo "Install backports 3.16 kernel and headers"
                apt-get -t ${RELEASE}-backports --yes --force-yes --fix-missing install linux-base initramfs-tools=0.115~bpo70+1
                if $AMD64; then
                    apt-get -t ${RELEASE}-backports --yes --force-yes --fix-missing install linux-image-3.16.0-0.bpo.4-amd64 linux-headers-3.16.0-0.bpo.4-amd64 firmware-linux firmware-linux-free
                else
                    apt-get -t ${RELEASE}-backports --yes --force-yes --fix-missing install linux-image-3.16.0-0.bpo.4-586 linux-headers-3.16.0-0.bpo.4-586 firmware-linux firmware-linux-free
                fi
                ;;
        esac
        echo "..."
        echo "Please reboot to use new kernel"
    fi
}

createBackportsFile()
{
    if [ "${RELEASE}" = "squeeze" ]; then
        echo "deb http://backports.debian.org/debian-backports squeeze-backports main non-free" > $BACKPORTS_REPO
    else
        echo "deb http://ftp.debian.org/debian ${RELEASE}-backports main contrib non-free" > $BACKPORTS_REPO
    fi
    echo "deb http://UniverseNAS.0rca.ch/omvextras ${OMVVERSION}-backports main" >> $BACKPORTS_REPO
}

headers()
{
    export LANG=C
    export DEBIAN_FRONTEND=noninteractive

    apt-get --yes --force-yes --fix-missing install linux-headers-$(uname -r)
}

support()
{
    export LANG=C

    SYSINFO=$(</dev/urandom tr -dc "A-Za-z0-9" | head -c8)
    BATCH="sftp_batch"
    KEY="/etc/omvextras/id_dsa"

    # show message
    echo "ATTENTION - Your system info will be provided to the OpenMediaVault forum moderators - forums.openmediavault.org."
    echo "your log ID is: ${SYSINFO}, please refer to this log ID in your posts."
    echo ""

    # remove support files
    cd /tmp
    rm -f ${SYSINFO}.*

    # create support files
    echo "Creating sysinfo file..."
    /usr/sbin/omv-sysinfo > ${SYSINFO}.txt

    echo "Creating config.xml file with passwords and SSL certs removed..."
    grep -v password /etc/openmediavault/config.xml > ${SYSINFO}.xml
    sed -i '/<sslcertificate>/,/<\/sslcertificate>/d' ${SYSINFO}.xml

    # create batch file
    rm -f ${BATCH}
    echo "put ${SYSINFO}.txt" > ${BATCH}
    echo "put ${SYSINFO}.xml" >> ${BATCH}

    # sftp file to server
    sftp -b ${BATCH} -i ${KEY} -o StrictHostKeyChecking=no logupload@5.9.105.9:logs

    # remove support files
    rm -f ${SYSINFO}.*

    echo "Done."
}

resetperms()
{
    export LANG=C

    XPATH_RESETPERMS="${XPATH}resetperms/"
    sfref=$(omv_config_get "${XPATH_RESETPERMS}sharedfolderref")
    sfpath=$(omv_get_sharedfolder_path "${sfref}")
    dirperms=$(omv_config_get "${XPATH_RESETPERMS}dirperms")
    fileperms=$(omv_config_get "${XPATH_RESETPERMS}fileperms")

    # Removes all ACLs and sticky bits
    if [ "$(omv_config_get "${XPATH_RESETPERMS}clearacl")" = "1" ]; then
        echo "Clearing ACLs ..."
        setfacl -Rb "${sfpath}"
    fi

    # Make root:users owner of the shared folder and all subdirs
    echo "Changing owner to root:users ..."
    chown -R root:users "${sfpath}"

    # For all folders that are inside that folder (recursively) and the folder itself
    echo "Change directory permissions to ${dirperms} ..."
    find "${sfpath}" -type d -exec chmod "${dirperms}" {} +

    # For all files that are inside that folder (recursively)
    echo "Change file permissions to ${fileperms} ..."
    find "${sfpath}" -type f -exec chmod "${fileperms}" {} +
}

getArch()
{
    ARCH="`/bin/uname -m`"

    case "$ARCH" in
        *x86_64*)
            AMD64=true
        ;;
        *486*)
            AMD64=false
        ;;
        *586*)
            AMD64=false
        ;;
        *686*)
            AMD64=false
        ;;
        *)
            SKIP=true
        ;;
    esac
}

case $2 in
    update)
        OMVVERSION="kralizec"
        RELEASE="wheezy"

        update
    ;;

    aptclean)
        update
        /usr/sbin/omv-aptclean
    ;;

    installsystemd)
        systemd
    ;;

    installbackports)
        backports
    ;;

    installheaders)
        headers
    ;;

    sendsupport)
        support
    ;;

    resetperms)
        resetperms
    ;;

    *)
        update
        case ${conf} in
            configure) ;;
            *)  apt-get update || : ;;
        esac

    ;;
esac

exit 0
